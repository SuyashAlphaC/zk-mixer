{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"16630357468066580012","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"pdfRbuowDAbgd+k1F7GdOMle5eho6liZKlUFdTDpCO3dT4DfAy5SMXplQ/FH6jqFHpv37u3w8dqPm+1n8/Ln2LxN/TD0H6/Ddt3u++1Y3j1+rxp7+bqfuq681dwcL1W7durGffMyHoZh1Xy1w+H8oc9dO57jvp3KUbdquvG9xAJu+qE7Zd+ra7Wrl3KwYqFrebivp3q9BEa9J73Wp7t6nvl+ThkAi+OaIHWBSG0JRCk8s4ZIamuI4mpCmFlDjGJriLl6FloXsg8Acin6fT05/umC0/DMOWRnV4IyV89hZpbEWxslp+osuYXDRDPTyJpsnFmzVImZYSC5tkG4eilIFl7L2T7k9NOH8FQfHpto0sUjTXHxTM6uYvFQevbWyxxqQ8lzd0hnfWC6mSh6HBAbh3KzfQYQsTZK0iogS2/SfvFdmsPy27RfPNUcF081p4W7ew54cFvMnsbibaFMAFS5ti3m6qNdCs3xrv5vedWu++nun07DrnkpPWG6BL4EKes/RY8YyqyWL2VFjIgJMV+iOERCZERB9IjwBJ7AE3gCz8Pz8Dw8D8/D8/A8PA/Pw/PwArwAL8AL8AK8AC/AC/ACvABP4Sk8hafwFJ7CU3gKT+EpvAgvwovwIrwIL8KL8CK8CC/CS/ASvAQvwUvwErwEL8FL8BK8DC/Dy/AyvAwvw8vwMrwML8Mj5ywhS9gSscRbEixRS6IlyRKTyWQymUwmk8lkMplMJpPJZDKZTWaT2WQ2mU0+7xw+JSf59DP11U59+zZ0eM7YHMb1zWPH/t/OjtiDyW7arrv3w9SdNu75WNnK/wE=","file_map":{"50":{"source":"use dep::poseidon;\n\nmod merkle_tree;\nfn main(\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n    secret: Field,\n    nullifier: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) {\n    let commitmentHash = poseidon::poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    let computed_nullifier_hash = poseidon::poseidon2::Poseidon2::hash([nullifier], 1);\n    let computed_root = merkle_tree::compute_merkle_root(commitmentHash, merkle_proof, is_even);\n    // let recipient_binding = recipient * recipient;\n    // assert(recipient_binding == recipient * recipient);\n    assert(computed_nullifier_hash == nullifier_hash);\n    assert(computed_root == root);\n}\n","path":"/home/itsmesuyash/Documents/zk-mixer/circuit/src/main.nr"},"51":{"source":"use dep::poseidon;\n\npub fn compute_merkle_root(leaf: Field, merkle_proof: [Field; 20], is_even: [bool; 20]) -> Field {\n    let mut hash: Field = leaf;\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], hash)\n        };\n\n        hash = poseidon::poseidon2::Poseidon2::hash([left, right], 2);\n    }\n    hash\n}\n","path":"/home/itsmesuyash/Documents/zk-mixer/circuit/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/itsmesuyash/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}